/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.ast

import scala.language.experimental.macros

trait TableFunctions {
[#  abstract class TableFunction1[[#A1#]](val tableName: String, val aliasedAs: Option[String]) extends BaseTable {
    def apply[[#B1#]]([#column1: Column[B1]#])(implicit [#column1Equivalence: ColumnTypeEquivalence[A1, B1]#]): TableFunctionApplication[TableFunction1[[#A1#]]] = macro TableFunctionApplyImplementations.apply1
  }#

]
}

object TableFunctionApplyImplementations {
  import scala.reflect.macros.whitebox.Context

[#  def apply1(c: Context)([#column1: c.Expr[Column[_]]#])([#column1Equivalence: c.Expr[ColumnTypeEquivalence[_, _]]#]): c.Tree = {
    import c.universe._
    val tableFunction1 = c.prefix
    q"TableFunctionApplication[${tableFunction1.actualType}](${tableFunction1}.tableName, ${tableFunction1}.aliasedAs, Seq([#$column1#]), ${tableFunction1})"
  }#

]
}
