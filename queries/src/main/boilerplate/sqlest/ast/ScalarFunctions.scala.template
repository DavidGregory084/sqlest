/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.ast

import sqlest.ast.syntax.all._

trait ScalarFunctions {

  def KeywordFunction[R: ColumnType](name: String) = KeywordFunctionColumn[R](name).as(name)

  abstract class ScalarFunctionColumn0[R: ColumnType] {
    def apply(): AliasedColumn[R]
  }

  def ScalarFunction0[R: ColumnType](name: String) = new ScalarFunctionColumn0[R] {
    def apply() = ScalarFunctionColumn[R](name, Nil).as(name)
  }

  abstract class ScalarFunctionColumnN[A, R: ColumnType] {
    def apply(columns: Column[A]*): AliasedColumn[R]
  }

  def ScalarFunctionN[A, R: ColumnType](name: String) = new ScalarFunctionColumnN[A, R] {
    def apply(columns: Column[A]*) =
      ScalarFunctionColumn[R](name, columns).as(name)
  }

[#  abstract class ScalarFunctionColumn1[[#A1#], R: ColumnType] {
    def apply[[#B1#]]([#column1: Column[B1]#])(implicit [#column1Equivalence: ColumnTypeEquivalence[A1, B1]#]): AliasedColumn[R]
  }

  def ScalarFunction1[[#A1#], R: ColumnType](name: String) = new ScalarFunctionColumn1[[#A1#], R] {
    def apply[[#B1#]]([#column1: Column[B1]#])(implicit [#column1Equivalence: ColumnTypeEquivalence[A1, B1]#]) =
      ScalarFunctionColumn[R](name, Seq([#column1#])).as(name)
  }#

]
}