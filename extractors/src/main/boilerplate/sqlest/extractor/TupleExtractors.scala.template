/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.extractor

import cats._
import cats.implicits._
import cats.data.Streaming

case class Tuple1Extractor[Row, A1](e1: Extractor[Row, A1]) extends ProductExtractor[Row, Tuple1[A1]] {
  type Accumulator = Tuple1[Option[A1]]

  val innerExtractors = List(e1)

  def accumulate(rows: Streaming[Row]) = e1.run(rows).map { Tuple1(_) }

  def emit(results: Streaming[Accumulator]) = results.map { 
    case Tuple1(o1) => for {
      a1 <- o1
    } yield Tuple1(a1)
  }
}

[2..22#case class Tuple1Extractor[Row, [#A1#]]([#e1: Extractor[Row, A1]#]) extends ProductExtractor[Row, Tuple1[[#A1#]]] {
  type Accumulator = Tuple1[[#Option[A1]#]]

  val innerExtractors = List([#e1#])

  def accumulate(rows: Streaming[Row]) = 
    ([#e1.run(rows)# |@| ]).tupled

  def emit(results: Streaming[Accumulator]) = results.map { 
    case Tuple1([#o1#]) => for {
      [#a1 <- o1#
      ]
    } yield Tuple1([#a1#])
  }

  def map[B](func: ([#A1#]) => B) =
    MappedExtractor(this, func.tupled)
}#

]
